<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSURL+SSToolkitAdditions.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSURL(SSToolkitAdditions)</TokenIdentifier>
			<Abstract type="html">Provides extensions to NSURL for various common tasks.</Abstract>
			<DeclaredIn>NSURL+SSToolkitAdditions.h</DeclaredIn>
			
			<NodeRef refid="38"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSURL(SSToolkitAdditions)/URLWithFormat:</TokenIdentifier>
			<Abstract type="html">Creates and returns an NSURL object initialized with a provided a format string as a template into which the remaining
argument values are substituted.</Abstract>
			<DeclaredIn>NSURL+SSToolkitAdditions.h</DeclaredIn>			
			
			<Declaration>+ (id)URLWithFormat:(NSString *)format, ...</Declaration>
			<Parameters>
				<Parameter>
					<Name>format</Name>
					<Abstract type="html">A format string. See &quot;Formatting String Objects&quot;
for examples of how to use this method, and &quot;String Format Specifiers&quot;
for a list of format specifiers. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>...</Name>
					<Abstract type="html">A comma-separated list of arguments to substitute into format.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSURL object initialized with URLString. If the string was malformed, returns nil.</Abstract></ReturnValue>
			<Anchor>//api/name/URLWithFormat:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSURL(SSToolkitAdditions)/queryDictionary</TokenIdentifier>
			<Abstract type="html">Returns a new dictionary that contains a dictionary for the receivers query string.</Abstract>
			<DeclaredIn>NSURL+SSToolkitAdditions.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)queryDictionary</Declaration>
			
			<ReturnValue><Abstract type="html">A new dictionary that contains a dictionary for the form encoded string.</Abstract></ReturnValue>
			<Anchor>//api/name/queryDictionary</Anchor>
		</Token>
		
	</File>
</Tokens>